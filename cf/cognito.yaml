AWSTemplateFormatVersion: "2010-09-09"
Description: Set up Cognito resources for Biomage SCP [managed by github.com/biomage-ltd/iac]

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: The environment for which the buckets need to be created.

Conditions:
  isProd: !Equals [!Ref Environment, "production"]

Resources:
  FileUploadIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "file-upload-identity-pool-${Environment}"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClientLocal
          ProviderName: !GetAtt UserPool.ProviderName
        - ClientId: !Ref UserPoolClientCluster
          ProviderName: !GetAtt UserPool.ProviderName

  UIRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "ui-auth-user-role-${Environment}"
      AssumeRolePolicyDocument: |-
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "authenticated"
                }
              }
            }
          ]
        }
      Path: /
      Policies:
        - PolicyName: !Sub "can-upload-object-to-destination-bucket-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:ListMultipartUploadParts"
                  - "s3:AbortMultipartUpload"
                  - "s3:ListBucketMultipartUploads"
                Resource:
                  - !Sub "arn:aws:s3:::biomage-source-${Environment}/*"

        - PolicyName: !Sub "can-get-object-information-in-bucket-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectTagging"
                Resource:
                  - !Sub "arn:aws:s3:::biomage-source-${Environment}/*"

        - PolicyName: !Sub "can-list-objects-in-bucket-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                Resource:
                  - !Sub "arn:aws:s3:::biomage-source-${Environment}"

  # TODO: this will have to be refactored once authentication is done.
  # this will have to work with attribute-based access control or role-based
  # access control so we can limit the user to only upload to certain folders
  # on S3 depending on their instutiton/name/etc.
  #
  # see https://docs.aws.amazon.com/cognito/latest/developerguide/attributes-for-access-control.html
  # and https://docs.aws.amazon.com/cognito/latest/developerguide/role-based-access-control.html
  FileUploadIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref FileUploadIdentityPool
      Roles:
        "authenticated": !GetAtt UIRole.Arn

  SMSRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "biomage-cognito-sms-role-${Environment}"
      AssumeRolePolicyDocument: |-
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "cognito-idp.amazonaws.com"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "92bd350f-b2ad-455a-b614-a24e63555edb"
                }
              }
            }
          ]
        }
      Path: /
      Policies:
        - PolicyName: "can-send-sms"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:publish"
                Resource:
                  - '*'

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      UserPoolName: !Sub "biomage-user-pool-${Environment}"
      AccountRecoverySetting: 
        RecoveryMechanisms: 
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate: 
          EmailSubject: 'Your temporary password for Cellscope'
          EmailMessage: 'Thank you for signing up to Cellscope by Biomage. Your username is {username} and temporary password is {####}.'
          SMSMessage: 'Your Cellscope username is {username} and temporary password is {####}.'
        UnusedAccountValidityDays: 7
      AutoVerifiedAttributes:
        - email
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
        DeviceOnlyRememberedOnUserPrompt: true
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
        #From: noreply@biomage.net
        ReplyToEmailAddress: hello@biomage.net
      EnabledMfas:
        - SMS_MFA
        - SOFTWARE_TOKEN_MFA
      SmsConfiguration:
        ExternalId: '92bd350f-b2ad-455a-b614-a24e63555edb'
        SnsCallerArn: !GetAtt SMSRole.Arn
      MfaConfiguration: "OPTIONAL"
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: institution
          AttributeDataType: String
          Mutable: true
          Required: false
      SmsAuthenticationMessage: 'Your authentication code for Cellscope by Biomage is {####}.'
      SmsVerificationMessage: 'Your verification code for Cellscope by Biomage is {####}.'
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: true

  UserPoolClientCluster:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "biomage-cellscope-cluster-${Environment}"
      AllowedOAuthFlowsUserPoolClient: true
      UserPoolId: !Ref UserPool
      CallbackURLs:
        - !If [isProd, "https://scp.biomage.net/data-management",
          !Sub "https://ui-marcellp-ui200.scp-${Environment}.biomage.net/data-management"]
      AllowedOAuthFlows:
        - 'code'
      AllowedOAuthScopes:
        - 'phone'
        - 'email'
        - 'openid'
        - 'aws.cognito.signin.user.admin'
        - 'profile'
      DefaultRedirectURI: !If [isProd, "https://scp.biomage.net/data-management",
        !Sub "https://ui-marcellp-ui200.scp-${Environment}.biomage.net/data-management"]
      LogoutURLs:
        - !If [isProd, "https://scp.biomage.net/data-management",
        !Sub "https://ui-marcellp-ui200.scp-${Environment}.biomage.net/data-management"]
      SupportedIdentityProviders:
        - COGNITO

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain 
    Properties:
      UserPoolId: !Ref UserPool 
      Domain: !Sub "biomage-${Environment}"

  UserPoolClientLocal:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "biomage-cellscope-local-${Environment}"
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - 'code'
      AllowedOAuthScopes:
        - 'phone'
        - 'email'
        - 'openid'
        - 'aws.cognito.signin.user.admin'
        - 'profile'
      CallbackURLs:
        - "http://localhost:5000/data-management"
      DefaultRedirectURI: "http://localhost:5000/data-management"
      LogoutURLs:
        - "http://localhost:5000/data-management"
      SupportedIdentityProviders:
        - COGNITO